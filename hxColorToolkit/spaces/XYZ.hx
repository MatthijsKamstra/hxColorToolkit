 /*Author: Andy Li (andy@onthewings.net)Based on colortoolkit (http://code.google.com/p/colortoolkit/) The MIT LicenseCopyright (c) 2009 P.J. Onori (pj@somerandomdude.com)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*///via http://www.adobe.com/cfusion/communityengine/index.cfm?event=showdetails&productId=2&postId=14227//@see http://en.wikipedia.org/wiki/CIE_1931_color_spacepackage hxColorToolkit.spaces;		/**	 * @author pj	 */	class XYZ implements IColor {		/* @private */				private var _color:Int;		public var color(getColor, setColor) : Int;		public var x(getX, setX) : Float;		public var y(getY, setY) : Float;		public var z(getZ, setZ) : Float;		/* @private */		var _x:Float;		var _y:Float;		var _z:Float;				private function getColor():Int{ return this._color; }		private function setColor(value:Int):Int{			this._color=value;			var xyz:XYZ = this.generateXYZFromColor(value);			this._x=xyz.x;			this._y=xyz.y;			this._z=xyz.z;			return value;		}				private function getX():Float{ return this._x; }		private function setX(value:Float):Float{			this._x=value;			this._color=this.generateColorFromXYZ(this._x, this._y, this._z);			return value;		}				private function getY():Float{ return this._y; }		private function setY(value:Float):Float{			this._y=value;			this._color=this.generateColorFromXYZ(this._x, this._y, this._z);			return value;		}				private function getZ():Float{ return this._z; }		private function setZ(value:Float):Float{			this._z=value;			this._color=this.generateColorFromXYZ(this._x, this._y, this._z);			return value;		}				public function new(?x:Float=0, ?y:Float=0, ?z:Float=0){						this._x=x;			this._y=y;			this._z=z;			this._color=generateColorFromXYZ(x,y,z);		}				public function clone():IColor { return new XYZ(_x, _y, _z); }				/* @private */		function generateColorFromXYZ(xval:Float, yval:Float, zval:Float):Int		{			//X from 0 to  95.047      (Observer = 2°, Illuminant = D65)			//Y from 0 to 100.000			//Z from 0 to 108.883			var x:Float = xval / 100;        			var y:Float = yval / 100;        			var z:Float = zval / 100;        			 			var r:Float = x * 3.2406 + y * -1.5372 + z * -0.4986;			var g:Float = x * -0.9689 + y * 1.8758 + z * 0.0415;			var b:Float = x * 0.0557 + y * -0.2040 + z * 1.0570;			 			if ( r > 0.0031308 ) { r = 1.055 * Math.pow( r , ( 1 / 2.4 ) ) - 0.055; }			else { r = 12.92 * r; }			if ( g > 0.0031308 ) { g = 1.055 * Math.pow( g , ( 1 / 2.4 ) ) - 0.055; }			else { g = 12.92 * g; }			if ( b > 0.0031308 ) { b = 1.055 * Math.pow( b , ( 1 / 2.4 ) ) - 0.055; }			else { b = 12.92 * b; }						var cR:Int = Math.round(r*255) << 16;			var cG:Int = Math.round(g*255) << 8;			var cB:Int = Math.round(b*255);						return cR | cG | cB;		}				/* @private */		function generateXYZFromColor(color:Int):XYZ		{			var r:Float = (color >> 16 & 0xFF)/255;			var g:Float = (color >> 8 & 0xFF)/255;			var b:Float = (color & 0xFF)/255;			 			if (r > 0.04045){ r = Math.pow((r + 0.055) / 1.055, 2.4); }			else { r = r / 12.92; }			if ( g > 0.04045){ g = Math.pow((g + 0.055) / 1.055, 2.4); }			else { g = g / 12.92; }			if (b > 0.04045){ b = Math.pow((b + 0.055) / 1.055, 2.4); }			else { b = b / 12.92; }			r = r * 100;			g = g * 100;			b = b * 100;			 			//Observer. = 2°, Illuminant = D65						return new XYZ(r * 0.4124 + g * 0.3576 + b * 0.1805, r * 0.2126 + g * 0.7152 + b * 0.0722, r * 0.0193 + g * 0.1192 + b * 0.9505);		}	}